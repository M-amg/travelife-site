<?php

namespace App\models\HotelBeds;

use App\models\config\TlHotelBed;
use GuzzleHttp\Client;
use GuzzleHttp\MessageFormatter;
use GuzzleHttp\HandlerStack;

class HotelBedsService
{
    function __construct(){
        $this->apiKey = TlHotelBed ::select('HB_KEY')->first()->HB_KEY;
        $this->secret = TlHotelBed ::select('HB_SECRET')->first()->HB_SECRET;
        $this->baseUrl = TlHotelBed ::select('HB_URL')->first()->HB_URL;
        $this->contentUrl = TlHotelBed ::select('HB_CONTENT_URL')->first()->HB_CONTENT_URL;

        // Signature is generated by SHA256 (Api-Key + Secret + Timestamp (in seconds))
        $this->signature = hash("sha256", $this->apiKey.$this->secret.time());

        $this->headers = [
            'Accept' => 'application/json',
            'Api-key' => $this->apiKey,
            'X-Signature' => $this->signature,
            'Content-Type' => 'application/json',
            'Accept-Encoding' => 'gzip',
        ];
    }

    public function getStatus(){

        $client = new Client([
            'base_url' => "https://api.test.hotelbeds.com/hotel-api/1.0",
        ]);

        // $endpoint = 'https://api.test.hotelbeds.com/hotel-api/1.0/status';
        $endpoint = 'https://api.test.hotelbeds.com/hotel-content-api/1.0/hotels?fields=all&language=ENG&from=1&to=2';

        $response = $client->request('GET', $endpoint, [
            'headers' => $this->headers,
        ]);
        $json = $response->getBody()->getcontents();
        $json_string = json_decode($json, JSON_PRETTY_PRINT);
        dd($json_string);
    }

    public function search(\DateTime $checkIn, \DateTime $checkOut, $coordinates, $hotelCodes, $guestNationality, $guestRooms, $currency, $languageCode){

        $endpoint = $this->baseUrl .'hotels';

        $occupancies = [];
        foreach($guestRooms as $room){
            $occ_tmp = [
                'rooms' => 1,
                'adults' => $room['adults'],
                'children' => $room['children'],
            ];

            if(intval($room['children']) > 0){
                $paxes = [];
                foreach($room['childrenAges'] as $age){
                    $paxes[] = [
                        'type' => 'CH',
                        'age' => $age,
                    ];
                }
                $occ_tmp['paxes'] = $paxes;
            }

            $occupancies[] = $occ_tmp;
        }

        $availabilityRQ = [
            'stay' => [
                'checkIn' => $checkIn->format('Y-m-d'),
                'checkOut' => $checkOut->format('Y-m-d'),
            ],
            'occupancies' => $occupancies,
            'filter' => [
                'paymentType' => 'AT_WEB',
            ],
            // 'occupancies' => [
            //         [
            //             'rooms' => 1,
            //             'adults' => 3,
            //             'children' => 0,
            //         ],
            // ],
            // "hotels" => [
            //     "hotel" => [1, 271],
            // ],
        ];

        if($hotelCodes){
            $availabilityRQ["hotels"] = [
                "hotel" => $hotelCodes,
            ];
        }

        if($coordinates){
            $availabilityRQ['geolocation'] = [
                'latitude' => $coordinates['latitude'],
                'longitude' => $coordinates['longitude'],
                'radius' => 20,
                'unit' => 'km',
            ];
        }

        $stack = $this->createLoggerHandlerStack('hotels');

        $this->client = new Client([
            'handler' => $stack,
        ]);

        try {
            $response = $this->client->request('POST', $endpoint, [
                'headers' => $this->headers,
                'body' => json_encode($availabilityRQ),
            ]);
        } catch (Exception $e) {
            throw new \Exception("Http Request Exception");
        }

        if ($response->getStatusCode() != 200) {
            throw new \Exception("Hotelbeds Api returned error Code : ". $response->getStatusCode());
        }

        $json = (string) $response->getBody();

        // Logging the request
        // if(config('logging.xml_log_details')){
        // if(config('logging.xml_log_search')){
        //     $timestamp = (new \DateTime())->format('Y-m-d_H-i-s');
        //     Storage::disk('local')->put("xml/hotelbeds/".$timestamp.'_hotels.xml', );
        //     Storage::disk('local')->put("xml/hotelbeds/".$timestamp.'_hotels.xml', $newflightAPI->__getlastresponse());
        // }

        return json_decode($json);
        // $json_string = json_decode($json, JSON_PRETTY_PRINT);
        // dd($json_string);
    }

    public function recheck($rooms){

        $endpoint = $this->baseUrl .'checkrates';

        $checkRooms = [];
        foreach($rooms as $room){
            $checkRooms[] = [
                'rateKey' => $room['roomCode'],
            ];
        }
        $checkRateRQ = [
            'rooms' => $checkRooms,
        ];

        $stack = $this->createLoggerHandlerStack('checkrate');

        $this->client = new Client([
            'handler' => $stack,
        ]);

        $response = $this->client->request('POST', $endpoint, [
            'headers' => $this->headers,
            'body' => json_encode($checkRateRQ),
        ]);

        $json = (string) $response->getBody();
        return json_decode($json);

    }

    public function getComments($code, \DateTime $date){
        $endpoint = $this->contentUrl .'types/ratecommentdetails';

        $stack = $this->createLoggerHandlerStack('checkrate');

        $this->client = new Client([
            'handler' => $stack,
        ]);

        $response = $this->client->request('GET', $endpoint, [
            'headers' => $this->headers,
            'query' => [
                'code' => $code,
                'date' => $date->format('Y-m-d'),
                'fields' => 'all',
                'from' => '1',
                'to' => '100',
            ],
        ]);

        $json = (string) $response->getBody();
        return json_decode($json);
    }

    public function book($rooms, $holder, $reference){

        $endpoint = $this->baseUrl .'bookings';

        $bookingRQ = [
            'holder' => $holder,
            'rooms' => $rooms,
            'clientReference' => $reference,
            'tolerance' => 0.0,
        ];

        $stack = $this->createLoggerHandlerStack('booking');

        $this->client = new Client([
            'handler' => $stack,
        ]);

        try {
            $response = $this->client->request('POST', $endpoint, [
                'headers' => $this->headers,
                'body' => json_encode($bookingRQ),
            ]);
        } catch (\Exception $e) {
            dd((string)$e->getResponse()->getBody());
        }

        $json = (string) $response->getBody();
        return json_decode($json);
    }

    public function cancelBooking($reference, $reason, $simulationFlag = false){

        $endpoint = $this->baseUrl .'bookings/'. $reference;

        $stack = $this->createLoggerHandlerStack('cancelbooking');

        $this->client = new Client([
            'handler' => $stack,
        ]);

        $response = $this->client->request('DELETE', $endpoint, [
            'query' => ['cancellationFlag' => $simulationFlag ? 'SIMULATION' : 'CANCELLATION'],
            'headers' => $this->headers,
        ]);

        $json = (string) $response->getBody();
        return json_decode($json);
    }

    public function getBookings(){
        $endpoint = $this->baseUrl .'bookings';

        $stack = $this->createLoggerHandlerStack('getbookings');

        $this->client = new Client([
            'handler' => $stack,
        ]);

        try {
        $response = $this->client->request('GET', $endpoint, [
            'headers' => $this->headers,
            'query' => [
                'start' => '2019-05-29',
                'end' => '2019-05-30',
                'from' => 1,
                'to' => 100,
            ]
        ]);
        } catch (\Exception $e) {
            dd((string) $e->getResponse()->getBody());
        }

        dd(json_decode((string)$response->getBody()));
    }

    public function getStaticHotels($from, $to){

        $endpoint = $this->contentUrl .'hotels';
        $this->client = new Client();
        $response = $this->client->request('GET', $endpoint, [
            'headers' => $this->headers,
            'query' => [
                'fields' => 'all',
                'language' => 'ENG',
                'from' => $from,
                'to' => $to,
            ],
        ]);

        return json_decode($response->getBody()->getContents());
    }

    private function createLoggerHandlerStack($operation) {
        $stack = HandlerStack::create();
        $timestamp = (new \DateTime())->format('Y-m-d_H-i-s');
        $stack->push(
            \GuzzleHttp\Middleware::log(
                (new \Monolog\Logger('Logger'))->pushHandler(
                    new \Monolog\Handler\RotatingFileHandler(storage_path("app/xml/hotelbeds/{$timestamp}_{$operation}_request.txt"))
                ),
                new MessageFormatter('{request}')
            )
        );
        $stack->push(
            \GuzzleHttp\Middleware::log(
                (new \Monolog\Logger('Logger'))->pushHandler(
                    new \Monolog\Handler\RotatingFileHandler(storage_path("app/xml/hotelbeds/{$timestamp}_{$operation}_response.txt"))
                ),
                new MessageFormatter('{response}')
            )
        );

        return $stack;
    }
}
